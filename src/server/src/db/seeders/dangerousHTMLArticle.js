'use strict';

const artBody =
    '<p><span style="background-color: rgb(255,255,255);font-size: 16px;">This article covers the reasoning behind using the </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>dangerouslySetInnerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;"> property in a React application, which is the equivalent of the </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>innerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;"> attribute in browser DOM.</span></p>\n<h1><span style="font-size: 24px;">What is </span><span style="color: rgb(184,49,47);background-color: rgb(255,255,255);font-size: 24px;"><code>dangerouslySetInnerHTML</code></span><span style="font-size: 24px;">?</span></h1>\n<p><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>dangerouslySetInnerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;">is a property that you can use on HTML elements in a React application <br>to programmatically set their content. Instead of using a selector to grab the HTML element, then setting its </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>innerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;">, you can use this property directly on the element.</span></p>\n<p><span style="background-color: rgb(255,255,255);font-size: 16px;">When </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>dangerouslySetInnerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;">is used, React also knows that the content of that specific element is dynamic, and, for the children of that node, it simply skips the comparison against the <strong>virtual DOM</strong> to gain some extra performance.</span></p>\n<p><span style="background-color: rgb(255,255,255);font-size: 16px;">As the name of the property suggests, it can be dangerous to use because it makes your code vulnerable to </span><span style="color: rgb(226,80,65);background-color: rgb(255,255,255);font-size: 16px;"><strong>cross-site scripting (XSS)</strong></span><span style="background-color: rgb(255,255,255);font-size: 16px;"> attacks. This becomes an issue especially if you are fetching data from a third-party source or rendering content submitted by users.</span></p>\n<p><span style="background-color: rgb(255,255,255);font-size: 16px;">When to use </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>dangerouslySetInnerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;"><code>?</code></span></p>\n<p>A use case where you need to set the HTML content of a DOM element is when you populate a <code>&lt;div&gt;</code><br>element with the data coming from a rich text editor. Imagine you have a webpage where people can submit comments and you allow them to use a rich text editor. In this case, the output of that rich text editor is likely to be HTML with tags such as <code>&lt;p&gt;</code>, <code>&lt;b&gt;</code>, and <code>&lt;img&gt;</code>.</p>\n<p>Consider the following code snippet, which would render the string without being aware of the <code>&lt;b&gt; </code>tag in it â€” meaning that the output would be just the string itself without any bold text, like so: <em>lorem &lt;b&gt;ipsum&lt;/b&gt;</em>.</p>\n<pre>const App = () =&gt; {<br>  const data = \'lorem &lt;b&gt;ipsum&lt;/b&gt;\';<br><br>  return (<br>    &lt;div&gt;<br>      {data}<br>    &lt;/div&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p><span style="font-size: 16px;">But when </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>dangerouslySetInnerHTML</code></span><span style="font-size: 16px;">is used, React becomes aware of the HTML tags and renders them properly. This time, the output would be rendered correctly with bold text (i.e., lorem <strong>ipsum</strong>).</span></p>\n<pre><span style="font-size: 16px;">const App = () =&gt; {<br>  const data = \'lorem &lt;b&gt;ipsum&lt;/b&gt;\';<br><br>  return (<br>    &lt;div<br>      dangerouslySetInnerHTML={{__html: data}}<br>    /&gt;<br>  );<br>}<br><br>export default App;</span></pre>\n<p><span style="background-color: rgb(255,255,255);font-size: 16px;">Note that it should be an object with the <code><strong>__html</strong></code> key passed to </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>dangerouslySetInnerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;">. Other than that, the element you use the </span><span style="color: rgb(209,72,65);background-color: rgb(255,255,255);font-size: 16px;"><code>dangerouslySetInnerHTML</code></span><span style="background-color: rgb(255,255,255);font-size: 16px;"> property on should not have any children, hence the use of <code>&lt;div&gt;</code> element as a self-closing tag.</span></p>\n<p><span style="background-color: rgb(255,255,255);font-size: 16px;">The requirement for passing an object is just another safeguard to prevent developers from using it without going through the documentation and becoming aware of the potential danger.</span></p>\n<h2>Sanitization when using <code>dangerouslySetInnerHTML</code></h2>\n<p>The examples above pose no danger when rendered. However, there might be some cases where an HTML element executes a script.</p>\n<p>Consider the following examples where a JavaScript event is attached to an HTML element. Although these are harmless examples, they are proof of concepts that show how an HTML element can be exploited to run malicious scripts.</p>\n<pre>const App = () =&gt; {<br>  const data = `lorem ipsum &lt;img src="" onerror="alert(\'message\');" /&gt;`;<br><br>  return (<br>    &lt;div<br>      dangerouslySetInnerHTML={{__html: data}}<br>    /&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>Luckily, there are sanitization tools for HTML, which detect potentially malicious parts in HTML code and then output a clean and safe version of it. The most popular sanitizer for HTML is <a href="https://github.com/cure53/DOMPurify" target="_blank">DOMPurify</a>.</p>\n<pre>import DOMPurify from \'dompurify\'<br><br>const App = () =&gt; {<br>  const data = `lorem &lt;b onmouseover="alert(\'mouseover\');"&gt;ipsum&lt;/b&gt;`<br>  const sanitizedData = () =&gt; ({<br>    __html: DOMPurify.sanitize(data)<br>  })<br><br>  return (<br>    &lt;div<br>      dangerouslySetInnerHTML={sanitizedData()}<br>    /&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>As expected, when we hover over the bold text, there is no alert function executed.</p>\n';

module.exports = {
    async up(queryInterface, Sequelize) {
        let mockup = [];
        mockup.push({
            title: `Using dangerouslySetInnerHTML in a React application`,
            body: artBody,
            description:
                'dangerouslySetInnerHTML is a property that you can use on HTML elements in a React application to programmatically set their content.',
            date_of_creation: new Date(),
            creatorid: '1',
            comments: '[]',
            createdAt: new Date(),
            updatedAt: new Date(),
        });
        await queryInterface.bulkInsert('Articles', mockup, {});
    },

    async down(queryInterface, Sequelize) {
        await queryInterface.bulkDelete('Articles', null, {});
    },
};
